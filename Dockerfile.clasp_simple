# docker run -it --privileged --cap-add=SYS_PTRACE --security-opt="seccomp=unconfined" clasptest bash
# docker run -it --privileged --cap-add=ALL --security-opt="seccomp=unconfined" clasptest bash
FROM ubuntu:20.04

SHELL ["/bin/bash", "-c"]
ENV DEBIAN_FRONTEND noninteractive
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

RUN apt update -q -qq && \
    apt install -y -q -qq tzdata

# install all clasp build deps: mostly clang, boost

RUN apt-get -q -qq update && apt-get install -y -q -qq \
  software-properties-common wget curl \
  language-pack-en \
  libgc-dev \
  gcc g++ llvm clang cmake libunwind-dev liblzma-dev libgmp-dev binutils-gold binutils-dev \
  zlib1g-dev libncurses-dev libboost-filesystem-dev libboost-regex-dev \
  libboost-date-time-dev libboost-program-options-dev libboost-system-dev \
  libboost-iostreams-dev csh flex gfortran zlib1g-dev libbz2-dev patch \
  git sbcl libexpat-dev wget vim libzmq3-dev libelf-dev libbsd-dev
#apt install 

ARG LLVM_V=9
RUN apt install -q -y libllvm${LLVM_V} llvm-${LLVM_V} llvm-${LLVM_V}-dev llvm-${LLVM_V}-runtime \
    clang-${LLVM_V} clang-tools-${LLVM_V} libclang-common-${LLVM_V}-dev libclang-${LLVM_V}-dev \
    libclang1-${LLVM_V} clang-format-${LLVM_V} clangd-${LLVM_V} \
    lldb-${LLVM_V} lld-${LLVM_V} libc++-${LLVM_V}-dev libc++abi-${LLVM_V}-dev \
    python-clang-${LLVM_V} 
#    python3-clang-${LLVM_V} 

ENV CC=/usr/bin/clang-${LLVM_V} CXX=/usr/bin/clang++-${LLVM_V}

RUN ln -s /usr/bin/python3 /usr/bin/python

# Copy the entire clasp directory less .dockerignore and clean the build dir
WORKDIR /claspbuild

ADD . clasp
# RUN git clone --depth=1 https://github.com/clasp-developers/clasp.git clasp

WORKDIR /claspbuild/clasp

RUN rm -rf build/* && mkdir -p /opt/clasp

# checkout submodules, configure, and build
RUN echo "LLVM_CONFIG_BINARY='/usr/bin/llvm-config-${LLVM_V}'" > wscript.config
RUN echo "PREFIX='/opt/clasp'" >> wscript.config
# RUN echo "CLASP_VERSION='clasp_docker'" >> wscript.config
RUN echo "USE_PARALLEL_BUILD = True" >> wscript.config
#RUN echo "USE_LLD = True" >> wscript.config
RUN echo "USE_LLD = False" >> wscript.config
RUN echo "CLASP_BUILD_MODE = 'object'" >> wscript.config
RUN echo 'DEBUG_OPTIONS = [ "DEBUG_CCLASP_LISP", "DEBUG_VERIFY_MODULES", "DEBUG_ASSERT_TYPE_CAST", "DEBUG_JIT_LOG_SYMBOLS" ]' >> wscript.config
# RUN echo "CLASP_BUILD_MODE = 'bitcode'" >> wscript.config

# RUN git clone --depth=1 https://github.com/quicklisp/quicklisp-client.git $HOME/quicklisp
# RUN mkdir $HOME/quicklisp/local-projects
# RUN git clone --depth=1 https://github.com/slime/slime $HOME/slime
#RUN cd $HOME/quicklisp/local-projects \
# && git clone --depth=1 https://github.com/drmeister/cl-jupyter.git \
# && git clone --depth=1 https://github.com/clasp-developers/cl-jupyter-widgets.git \
# && git clone --depth=1 https://github.com/clasp-developers/cl-nglview.git \
# && git clone --depth=1 https://github.com/clasp-developers/cl-bqplot.git \
# && git clone --depth=1 https://github.com/clasp-developers/uuid.git \
# && git clone --depth=1 https://github.com/clasp-developers/bordeaux-threads.git

RUN ./waf configure
#RUN ./waf -j $(nproc) build_iboehm_d
#RUN ./waf -j $(nproc) build_aboehm_d
RUN ./waf -j $(nproc) build_iboehm
RUN ./waf -j $(nproc) build_aboehm
RUN ./waf -j $(nproc) build_bboehm
RUN ./waf -j $(nproc) build_cboehm
RUN ./waf install_cboehm
#RUN ./waf -j $(nproc) build_dboehm
#RUN ./waf install_dboehm
